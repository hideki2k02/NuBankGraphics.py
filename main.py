# I/O and configuration
import os
import yaml

# Graphic and GUI
from simple_term_menu import TerminalMenu
from plotly.subplots import make_subplots
import plotly.graph_objects as graph_obj

# Database libraries
import sqlite3
import pandas

# Debugging
import logging
import timeit



class Debug_Helper:
    def __init__(self, debug_mode):
        if os.path.exists("debug.log"): os.remove("debug.log")

        self.logger = logging.getLogger(__name__)
        if debug_mode:
            logging.basicConfig(filename='debug.log', level=logging.INFO)



    def log(self, input_text):
        self.logger.info(input_text)

    def calculate_timer(self, input_time):
        self.logger.info(f"Estimated time to run parse_csv: {timeit.default_timer() - input_time}")

def boolean_prompt(input_text):
    print(input_text)

    return not bool(
        TerminalMenu(["Yes", "No"]).show()
    )

def csv_file_dropdown_selection(filter):
    # Searches current directory for nubank csv files
    menu_entries = []
    current_working_dir = os.scandir()
    for file in current_working_dir:
        # Ignore files with "lock in name"
        # Typically generated by Office Programs
        if "lock" in file.name:
            continue

        if "csv" and filter in file.name:
            menu_entries.append(file.name)

    if len(menu_entries) > 0:
        print(f'Please select the "{filter}" file below')
        menu = TerminalMenu(menu_entries)
        menu_index = menu.show()
        return menu_entries[menu_index]

    print(f'No file with the filter "{filter}" was found!')

def load_config(config_file_name):
    if not os.path.exists(config_file_name):
        print("Config file not found! Creating default one...")

        template_yml = {
            "debug_mode": False,
            "database_name": "database.sqlite",
            "currency_prefix": "R$",

            "credit_card": {
                "fileName_includes": "Cartao",
                "CSV_entryName": "title",
                "CSV_entryValue": "amount",
                "ignore_negative_values": True,
                "only_negative_values": False
            },

            "bank_transactions": {
                "fileName_includes": "Conta",
                "CSV_entryName": "Descrição",
                "CSV_entryValue": "Valor",
                "ignore_negative_values": False,
                "only_negative_values": True
            },
        }

        with open(config_file_name, 'w') as config_file:
            yaml_obj = yaml.dump(template_yml, sort_keys=False)
            config_file.write(yaml_obj)

            return template_yml

    # Only ran if the file exists
    return yaml.safe_load(open("config.yml"))

def parse_csv(
        csv_fileName, input_name, input_value, ignore_negative_values, only_negative_values, currency_prefix,
        database, debug_logger
    ):

    debug_timer = timeit.default_timer()

    csv_file = pandas.read_csv(csv_fileName)
    chart_entries = {}
    total_value = 0

    for index in range(len(csv_file[input_name])):
        index_name = csv_file[input_name][index]
        index_value = csv_file[input_value][index]
        index_category = database.cursor().execute(f"SELECT categoria FROM empresas WHERE nome = '{index_name}'").fetchone()

        # if on ignore_negative_values mode, ignore positive values (presumably influx of money)
        if ignore_negative_values and index_value <= 0: continue

        # Flips the negative index_value so it shows properly on the chart if only_negative_values is enabled
        if only_negative_values:
            if index_value < 0: index_value = abs(index_value)
            else: continue

        # Check the database and prompt the user to register the entry it if it does not exist
        if index_category is None:
            print(f'\nCategory for "{index_name} ({currency_prefix} {index_value})" not found in the database! Please register it')

            index_category = input("Categoria (Leave it empty to ignore it on future runs): ")

            debug.log(f"Trying to add {index_name} to {index_category} on the database")

            database.cursor().execute(f"INSERT INTO empresas (nome, categoria) VALUES ('{index_name}', '{index_category}')")
            database.commit()

        # Ignores empty categories (including from the registered above)
        if not index_category or index_category[0] == "": continue

        # Checks if the current category has already been initialized
        # If not, initialize it with a value of zero
        if index_category not in chart_entries:
            chart_entries[index_category] = 0

        chart_entries[index_category] += index_value
        total_value += index_value

    debug.calculate_timer(debug_timer)

    return chart_entries, total_value

def render_pie_chart(chart1, chart2, currency_prefix, debug):
    debug_timer = timeit.default_timer()

    figure = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
    pie_config = dict(
        textinfo='label+percent+value',
        texttemplate='%{label}: R$ %{value:.2f}<br> (%{percent})',
        textfont_size=17,

        # <extra></extra> is required to remove some annoying buggy text
        hovertemplate=(
            'You have spent a total of ' + currency_prefix + '%{value:.2f}<br>'
            'Thats %{percent} of the selected period!'
            '<extra></extra>'
        ),

        marker=dict(line=dict(color='#000000', width=2)),
    )

    # First Chart (Categories)
    figure.add_trace(
        graph_obj.Pie(
            labels=list(chart1.keys()),
            values=list(chart1.values()),
        ).update(pie_config), 1,1
    )

    # Second Chart (Credit Card and Bank Transaction)
    figure.add_trace(
        graph_obj.Pie(
            labels=list(chart2.keys()),
            values=list(chart2.values()),
            showlegend=False,
        ).update(pie_config), 1,2
    )

    figure.update_layout(
        title=dict(
            text="Total expenses",
            font=dict(size=45),
            automargin=True,
            yref='container',
            xanchor='center',
            yanchor='top',

            # This is needed for some reason, else the alignment doesnt work
            y=0.95,
            x=0.5
        ),

        # minreducedwidth=1024,
        # minreducedheight=1024,
    )

    figure.show()
    debug.calculate_timer(debug_timer)

if __name__ == "__main__":
    chart1, chart2 = ({}, {})

    config = load_config("config.yml")
    debug = Debug_Helper(config["debug_mode"])
    sqlite_database = sqlite3.connect(
        config["database_name"],
        timeout=10
    )

    credit_card_file = csv_file_dropdown_selection(config["credit_card"]["fileName_includes"])
    if credit_card_file:
        debug.log(f"Trying to parse {credit_card_file}")

        entries, total_value = parse_csv(
            credit_card_file,
            config["credit_card"]["CSV_entryName"],
            config["credit_card"]["CSV_entryValue"],
            config["credit_card"]["ignore_negative_values"],
            config["credit_card"]["only_negative_values"],
            config["currency_prefix"],
            sqlite_database, debug
        )

        chart1.update(entries)
        chart2.update({
            "Credit Card": total_value
        })

        debug.log(f"Categories Parsed on {credit_card_file}: {entries}")
        debug.log(f"Total on {credit_card_file}: {total_value}")

    bank_transactions_file = csv_file_dropdown_selection(config["bank_transactions"]["fileName_includes"])
    if bank_transactions_file:
        debug.log(f"Trying to parse {bank_transactions_file}")

        entries, total_value = parse_csv(
            bank_transactions_file,
            config["bank_transactions"]["CSV_entryName"],
            config["bank_transactions"]["CSV_entryValue"],
            config["bank_transactions"]["ignore_negative_values"],
            config["bank_transactions"]["only_negative_values"],
            config["currency_prefix"],
            sqlite_database, debug
        )

        chart1.update(entries)
        chart2.update({
            "Bank Transactions": total_value
        })

        debug.log(f"Categories Parsed on {bank_transactions_file}: {entries}")
        debug.log(f"Total on {bank_transactions_file}: {total_value}")

    render_pie_chart(
        chart1, chart2, config["currency_prefix"], debug
    )
